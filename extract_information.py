from pymongo import MongoClient
from langchain_ollama import OllamaEmbeddings, OllamaLLM
from langchain_mongodb import MongoDBAtlasVectorSearch
from langchain.chains import RetrievalQA
import gradio as gr
from gradio.themes.base import Base
import key_param

# MongoDB setup
client = MongoClient(key_param.MONGO_URI)
db_name = "Harry_Potter"
collection_name = "collection_of_harry_potter_text_blobs"
collection = client[db_name][collection_name]

# Initialize Ollama embeddings
embeddings = OllamaEmbeddings(model="llama3.2")

# Initialize MongoDB vector store
vector_store = MongoDBAtlasVectorSearch(collection=collection, embedding=embeddings)

# Initialize Ollama LLM for query answering
llm = OllamaLLM(model="llama3.2")

# Query data function
def query_data(query):
    try:
        # Perform similarity search
        docs = vector_store.similarity_search(query, k=1)
        if not docs:
            return "No results found."

        # Extract relevant document
        relevant_doc = docs[0].page_content

        # Set up retriever and QA chain
        retriever = vector_store.as_retriever()
        qa = RetrievalQA.from_chain_type(llm=llm, chain_type="stuff", retriever=retriever)

        # Get the answer
        retriever_output = qa.run(query)
        return f"Document: {relevant_doc}\n\nAnswer: {retriever_output}"

    except Exception as e:
        return f"An error occurred: {e}"

# Gradio app
with gr.Blocks(theme=Base(), title="Harry Potter Text Search") as demo:
    gr.Markdown(
        """
        # Harry Potter Text Search
        This demo searches the Harry Potter text blobs for relevant information based on your query. 
        """
    )
    textbox = gr.Textbox(label="Enter your query here")
    button = gr.Button("Submit", variant="primary")
    output = gr.Textbox(lines=10, max_lines=10, label="Output Generated by Atlas Vector Search")

    button.click(query_data, inputs=[textbox], outputs=[output])

demo.launch()
